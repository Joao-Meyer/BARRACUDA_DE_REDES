---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  _|_|_|_|_
-|              |-
-|    CPU   |-   <-- Só intende a linguagem de máquina
-|              |-
-|_______|-
    |  |  |  |

Linguagens de programação
	|-> Interpretadas
		|-> Quem interpreta é o processador, o qual só entende a linguagem de máquina (Assembly)
		|-> É necessário um interpretador para intermediar a linguagem e o processador
		|-> O interpretador converte a linguagem (Por exemplo JAVA, Python, Ruby, R, Shell, etc..) em linguagem de máquina

	|-> Compiladas
		|-> Exemplos de linguagens compiladas são JAVA, C, C#, GO, Rust, Fortran, Dataflex, etc...	

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Arquivo fonte
	|-> Após a criação do sistema/programa será gerado um arquivo fonte
	|-> É uma série de linhas de comando que a máquina não compreende
	|-> Para que seja entendido pelo processador (computador) é necessário que seja compilado/interpretado


O compilador funciona da seguinte maneira
	|-> Primeiro o programador EDITA o código fonte
	|-> O compilador VERIFICA o código do programador
	|-> Caso SIM, HAJAM ERROS DE SINTAXE o compilador dá FIM à compilação para que o programador corrija (EDITAR) os erros
	|-> Caso NÂO, NÂO HAJAM ERROS DE SINTAXE o compilador vai criar um CÓDIGO INTERMEDIÁRIO (normalmente em ASSEMBLY)
	|-> Depois é MONTADO um ARQUIVO OBJETO (.obj) EM LINGUAGEM DE MÁQUINA
	|-> E então, no passo LINK-EDITOR, são JUNTADAS ROTINAS, MONTADAS E ADICIONADAS BIBLIOTECAS DO SISTEMA
	|-> Para no fim ser gerado um ARQUIVO EXECUTÁVEL e o compilador FINALIZA

 ________
(_Inicio_)
     |
     V
 ________
|_Editar_| <________________
     |                                            |
     V                                          |
 ___________                     _____
|_Verificar_|                        (_Fim_)
      |                                          ^
      V                                        |
///////////\\\\\\\\\\                           |
<Há erro de sintaxe?> SIM __|
\\\\\\\\\\\//////////
          NAO
           |
           V
 ______________________
|_Codigo_intermediário_|
      |
      V
 __________
|_Montador_|
      |
      V
 _____________
|_Link-Editor_|
       |
       V
 ____________________
|_Arquivo_Executável_|
   |
   V
 _____
(_Fim_)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

O INTERPRETADOR	funciona da seguinte maneira
	|-> Primeiro o programador EDITA o código fonte
	|-> O interpretador VERIFICA A SINTAXE DA PRIMEIRA LINHA DO CÓDIGO FONTE
	|-> Há a verificação de ERROS DE SINTAXE
	|-> Se SIM, HÁ ERRO DE SINTAXE o interpretador FINALIZA a interpretação para que o progrmador corrija (EDITAR) os erros
	|-> Se NÃO, NÃO HÁ ERRO DE SINTAXE o interpretador vai CONVERTER EM LINGUAGEM DE MÁQUINA (normalmente em ASSEMBLY) o código
	|-> O programa, que agora está em LINGUAGEM DE MÁQUINA vai ser EXECUTADO PELO SISTEMA OPERACIONAL
	|-> É feita uma verificação se HÁ MAIS LINHAS DE CÓDIGO
	|-> Caso NÃO, NÃO HÁ MAIS LINHAS DE CÓDIGO é FINALIZADA a interpretação
	|-> Caso SIM, HÁ MAIS LINHAS DE CÓDIGO é feita a VERIFICAÇÃO DA PRÓXIMA LINHA DO CÓDIGO FONTE e É FEITA UMA VERIFICAÇÃO DE ERROS DE SINTAXE e o processo se repete até o esgotamento das linhas do código fonte

 ________
(_Inicio_)
     |
 ____V___
|_Editar_| <--------------------------------------------------------------------------------------
     |    											__|__
     |                      								       (_Fim_)
 ____V_______________________________       			 ///////////\\\\\\\\\\            ^
|_Verificar_sintaxe_da_primeira_linha_|--> () -----------------> <Há erro de sintaxe?> SIM -------|
                          		   ^			 \\\\\\\\\\\//////////	   
					   |				   NÃO
					   |	    			    |
					   |	    			    |
					   |			____________V_________
 ___________________________________	   |		       |_Converte_a_linguagem_|
|_Verifica_sintaxe_da_próxima_linha_| -----|				    |
     ^						    			    |
     |		//////////////\\\\\\\\\\\\\ 			 ___________V_______
     |----- SIM <Há mais linhas de código?> <------------------ |_Executa_pelo_S.O._|
		\\\\\\\\\\\\\\/////////////
			     NÃO
			      |
			    __V__
			   (_Fim_)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

JAVA

No Java, para que possa ser utilizado o código há um processo um pouco diferente por conta dele poder ser compilado e interpretado

1º - É criado o código pelo programador
2º - O código é passado por um compilador Java, o JAVAC
3º - O código agora se torna um BYTE CODE (.class)
4º - É necessária uma JVM (Java Virtual Machine), uma máquina virtual Java que é instalada em diversos sistemas operacionais na qual tem um interpretador. Por conta disso há uma das melhores qualidades do Java, a PORTABILIDADE.

Para programar em java é preciso:

Classe (Ba tum dss), são utilizadas classes em Java

JDK (java development kit) - [O professor recomenda o JDK 8]
	|-> Vai vir instalado o JAVAC - Para compilar
	|-> JRE (Java Runtime Enviroment / Ambiente de Tempo de Execução JAVA) que corresponde à JVM- Para interpretar o ByteCode

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Programando em Java:

//todo programa em Java começa com uma classe
//obrigatoriamente todas as classes começam com letra maiúscula (no caso o T de Teste)
//Java é case sensitive ( A != a )


class Teste{

//"String" é escrito com "S" maiúsculo e é necessário colocar o "[]" (colchetes/brackets) após a palavra "String" //ou "args"

	public static void main (String[] args){

				

	}

}